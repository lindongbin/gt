name: deploy-to-ibm

on:
  schedule:
    - cron: "0 20 * * 6"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Prepare for Deployment
      run: |
        curl -sL "https://github.com/Mrs4s/go-cqhttp/releases/download/v0.9.30/go-cqhttp-v0.9.30-linux-amd64.tar.gz" | tar -zx go-cqhttp
        
        cat > device.json << EOF
        {"display":"MIRAI.871355.001","product":"mirai","device":"mirai","board":"mirai","model":"mirai","finger_print":"mamoe/mirai/mirai:10/MIRAI.200122.001/5768199:user/release-keys","boot_id":"e3ddb090-487e-0416-6c1a-bee0c59d45d6","proc_version":"Linux version 3.0.31-5aQF5uaS (android-build@xxx.xxx.xxx.xxx.com)","protocol":0,"imei":"531686398009843"}
        EOF
        
        cat > config.json << EOF
        {
          "uin": ${{ secrets.CF_QQID_IBM }},
          "password": "${{ secrets.CF_QQPW_IBM }}",
          "encrypt_password": false,
          "password_encrypted": "",
          "enable_db": false,
          "access_token": "",
          "relogin": {
            "enabled": true,
            "relogin_delay": 1,
            "max_relogin_times": 0
          },
          "_rate_limit": {
            "enabled": false,
            "frequency": 1,
            "bucket_size": 1
          },
          "ignore_invalid_cqcode": false,
          "force_fragmented": false,
          "heartbeat_interval": 0,
          "http_config": {
            "enabled": false,
            "host": "0.0.0.0",
            "port": 5700,
            "timeout": 0,
            "post_urls": {}
          },
          "ws_config": {
            "enabled": true,
            "host": "127.0.0.1",
            "port": 8090
          },
          "ws_reverse_servers": [
            {
              "enabled": false,
              "reverse_url": "ws://you_websocket_universal.server",
              "reverse_api_url": "ws://you_websocket_api.server",
              "reverse_event_url": "ws://you_websocket_event.server",
              "reverse_reconnect_interval": 3000
            }
          ],
          "post_message_format": "string",
          "debug": false,
          "log_level": "",
          "web_ui": {
            "enabled": false,
            "host": "127.0.0.1",
            "web_ui_port": 9999,
            "web_input": false
          }
        }
        EOF
        
        cat > requirements.txt << EOF
        aiohttp
        EOF
        
        cat > mirai.py << EOF
        import os, json, random, asyncio, aiohttp
        img = "pixiv.png"
        async def pixiv():
            try:
                async with aiohttp.ClientSession() as session:
                    pix = random.randint(1, 10)
                    url = "https://www.pixiv.net/ranking.php?mode=daily&content=illust&p=" + str(pix) +"&format=json"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    pix = random.randint(0, 49)
                    illust_id = json.loads(resp)["contents"][pix]["illust_id"]
                    title = json.loads(resp)["contents"][pix]["title"]
                    user_name = json.loads(resp)["contents"][pix]["user_name"]
                    url = "https://www.pixiv.net/ajax/illust/" + str(illust_id) + "/pages"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    resp = json.loads(resp)["body"][0]["urls"]["original"]
                    global img
                    if os.path.exists(img):
                        os.remove(img)
                    img = resp.split("/")[-1]
                    headers = {'Referer':'https://app-api.pixiv.net/'}
                    async with session.get(url=resp, headers=headers) as req:
                        resp = await req.read()
                        with open(img, "wb") as f:
                            f.write(resp)
                resp = {"action": "send_group_msg", "params": {"group_id": ${{ secrets.CF_QQUN_IBM }}, "message": [{"type": "text", "data": {"text": "标题：" + title +"\n作者：" + user_name + "\n来源：https://www.pixiv.net/artworks/" + str(illust_id)}}, {"type": "image", "data": {"file": "file:////app/" + img}}]}}
                return resp
            except:
                return
        async def main():
            os.system('./go-cqhttp &')
            retry = True
            while retry == True:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.ws_connect("ws://127.0.0.1:8090") as ws:
                            while True:
                                resp = await pixiv()
                                if resp:
                                    await ws.send_json(resp)
                                delay = random.randint(2, 5)
                                delay = delay * 60
                                await asyncio.sleep(delay)
                except:
                    await asyncio.sleep(5)
                    retry = True
        asyncio.get_event_loop().run_until_complete(main())
        EOF
        
        cat > Procfile << EOF
        web: python mirai.py
        EOF
        
        cat > manifest.yml << EOF
        applications:
        - name: mirai
          memory: 256M
          no-route: true
          health-check-type: process
          buildpacks:
          - python_buildpack
        EOF
        
        chmod 0755 *
        
    - name: Deploy to Cloud Foundry
      run: |
        curl -sL "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx cf7
        
        ./cf7 login \
          -a "https://api.us-south.cf.cloud.ibm.com" \
          -u "${{ secrets.CF_USER_IBM }}" \
          -p "${{ secrets.CF_PASSWORD_IBM }}" \
          -o "${{ secrets.CF_ORG_IBM }}" \
          -s "dev"
           
        ./cf7 push
