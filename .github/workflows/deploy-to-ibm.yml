name: deploy-to-ibm

on:
  schedule:
    - cron: "30 21 * * *"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Prepare for Deployment
      run: |
        url=$(curl -sL https://api.github.com/repos/Mrs4s/go-cqhttp/releases/latest | grep 'linux_amd64.tar.gz' | grep 'browser_download_url' | sed 's/"/\n/g' | grep 'linux_amd64.tar.gz')
        curl -sL "${url}" | tar -zx go-cqhttp
        
        cat > device.json << EOF
        {"display":"MIRAI.871355.001","product":"mirai","device":"mirai","board":"mirai","model":"mirai","finger_print":"mamoe/mirai/mirai:10/MIRAI.200122.001/5768199:user/release-keys","boot_id":"e3ddb090-487e-0416-6c1a-bee0c59d45d6","proc_version":"Linux version 3.0.31-5aQF5uaS (android-build@xxx.xxx.xxx.xxx.com)","protocol":0,"imei":"531686398009843"}
        EOF
        
        cat > config.yml << EOF
        account:
          uin: ${{ secrets.CF_QQID_IBM }}
          password: '${{ secrets.CF_QQPW_IBM }}'
          encrypt: false
          relogin:
            disabled: false
            delay: 3
            interval: 0
            max-times: 0
          use-sso-address: false
        heartbeat:
          disabled: false
          interval: 5
        message:
          post-format: string
          ignore-invalid-cqcode: false
          force-fragment: false
          fix-url: false
          proxy-rewrite: ''
          report-self-message: false
          remove-reply-at: false
          extra-reply-data: false
        output:
          log-level: info
          debug: false
        default-middlewares: &default
          access-token: ''
          filter: ''
          rate-limit:
            enabled: false
            frequency: 1
            bucket: 1
        servers:
          - http:
              disabled: true
              host: 127.0.0.1
              port: 5700
              timeout: 5
              middlewares:
                <<: *default
              post:
          - ws:
              disabled: false
              host: 127.0.0.1
              port: 8090
              middlewares:
                <<: *default
          - ws-reverse:
              disabled: true
              universal: ws://your_websocket_universal.server
              api: ws://your_websocket_api.server
              event: ws://your_websocket_event.server
              reconnect-interval: 3000
              middlewares:
                <<: *default
        database:
          leveldb:
            enable: false
        EOF
        
        cat > requirements.txt << EOF
        aiohttp
        EOF
        
        cat > mirai.py << EOF
        import os, json, random, asyncio, aiohttp, datetime
        async def pixiv():
            try:
                async with aiohttp.ClientSession() as session:
                    pix = random.randint(1, 10)
                    url = "https://www.pixiv.net/ranking.php?mode=daily&content=illust&p=" + str(pix) +"&format=json"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    pix = random.randint(0, 49)
                    illust_id = json.loads(resp)["contents"][pix]["illust_id"]
                    title = json.loads(resp)["contents"][pix]["title"]
                    user_name = json.loads(resp)["contents"][pix]["user_name"]
                    url = "https://www.pixiv.net/ajax/illust/" + str(illust_id) + "/pages"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    resp = json.loads(resp)["body"][0]["urls"]["original"]
                    img = resp.split("/")[-1]
                    if os.path.exists(img):
                        return
                    else:
                        headers = {'Referer':'https://app-api.pixiv.net/'}
                        async with session.get(url=resp, headers=headers) as req:
                            resp = await req.read()
                            with open(img, "wb") as f:
                                f.write(resp)
                        resp = {"action": "send_group_msg", "params": {"group_id": ${{ secrets.CF_QQUN_IBM }}, "message": [{"type": "text", "data": {"text": "标题：" + title +"\n作者：" + user_name + "\n来源：" + str(illust_id)}}, {"type": "image", "data": {"file": "file:///" + os.path.realpath(img)}}]}}
                        return resp
            except:
                return
        async def main():
            os.system('./mirai.sh &')
            retry = True
            while retry == True:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.ws_connect("ws://127.0.0.1:8090") as ws:
                            while True:
                                hh = datetime.datetime.utcnow().hour + 8
                                if hh >= 24:
                                    hh = hh - 24
                                if 8 <= hh <= 24:
                                    resp = await pixiv()
                                    if resp:
                                        await ws.send_json(resp)
                                        delay = random.randint(10, 15)
                                        delay = delay * 60
                                        await asyncio.sleep(delay)
                                    else:
                                        await asyncio.sleep(30)
                except:
                    await asyncio.sleep(5)
                    retry = True
        asyncio.get_event_loop().run_until_complete(main())
        EOF
        
        cat > mirai.sh << EOF
        #!/bin/bash
        while true
        do
          ./go-cqhttp
          sleep 60
        done
        EOF
        
        cat > Procfile << EOF
        web: python mirai.py
        EOF
        
        cat > manifest.yml << EOF
        applications:
        - name: mirai
          memory: 256M
          no-route: true
          health-check-type: process
          buildpacks:
          - python_buildpack
        EOF
        
        chmod 0755 *
        
    - name: Deploy to Cloud Foundry
      run: |
        curl -sL "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx cf7
        
        ./cf7 login \
          -a "https://api.us-south.cf.cloud.ibm.com" \
          -u "${{ secrets.CF_USER_IBM }}" \
          -p "${{ secrets.CF_PASSWORD_IBM }}" \
          -o "${{ secrets.CF_ORG_IBM }}" \
          -s "dev"
           
        ./cf7 push
