name: deploy-to-ibm

on:
  schedule:
    - cron: "0 20 * * 6"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Prepare for Deployment
      run: |
        curl -sL "https://github.com/Mrs4s/go-cqhttp/releases/download/v0.9.32/go-cqhttp-v0.9.32-linux-amd64.tar.gz" | tar -zx go-cqhttp
        
        cat > device.json << EOF
        {"display":"MIRAI.871355.001","product":"mirai","device":"mirai","board":"mirai","model":"mirai","finger_print":"mamoe/mirai/mirai:10/MIRAI.200122.001/5768199:user/release-keys","boot_id":"e3ddb090-487e-0416-6c1a-bee0c59d45d6","proc_version":"Linux version 3.0.31-5aQF5uaS (android-build@xxx.xxx.xxx.xxx.com)","protocol":0,"imei":"531686398009843"}
        EOF
        
        cat > config.hjson << EOF
        {
            uin: ${{ secrets.CF_QQID_IBM }}
            password: "${{ secrets.CF_QQPW_IBM }}"
            encrypt_password: false
            password_encrypted: ""
            enable_db: false
            access_token: ""
            relogin: {
                enabled: true
                relogin_delay: 3
                max_relogin_times: 0
            }
            _rate_limit: {
                enabled: false
                frequency: 1
                bucket_size: 1
            }
            ignore_invalid_cqcode: false
            force_fragmented: false
            heartbeat_interval: 0
            http_config: {
                enabled: false
                host: 0.0.0.0
                port: 5700
                timeout: 0
                post_urls: {}
            }
            ws_config: {
                enabled: true
                host: 127.0.0.1
                port: 8090
            }
            ws_reverse_servers: [
                {
                    enabled: false
                    reverse_url: ws://you_websocket_universal.server
                    reverse_api_url: ws://you_websocket_api.server
                    reverse_event_url: ws://you_websocket_event.server
                    reverse_reconnect_interval: 3000
                }
            ]
            post_message_format: string
            use_sso_address: false
            debug: false
            log_level: ""
            web_ui: {
                enabled: false
                host: 127.0.0.1
                web_ui_port: 9999
                web_input: false
            }
        }
        EOF
        
        cat > requirements.txt << EOF
        aiohttp
        EOF
        
        cat > mirai.py << EOF
        import os, json, datetime, asyncio, aiohttp, random
        fstpc = 0
        fstmo = 0
        pcver = ""
        mover = ""
        async def chkver():
            global fstpc
            global fstmo
            global pcver
            global mover
            url = "https://pc.woozooo.com/doupload.php"
            headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0'}
            data = {'task': 5, 'folder_id': ${{ secrets.lzy_folder_id }}, 'pg': 1}
            cookie = {'ylogin': '${{ secrets.lzy_ylogin }}', 'phpdisk_info': '${{ secrets.lzy_phpdisk_info }}'}
            async with aiohttp.ClientSession() as session:
                async with session.post(url=url, data=data, headers=headers, cookies=cookie) as req:
                    files = await req.text()
                    url = "https://product-details.mozilla.org/1.0/firefox_versions.json"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    resp = json.loads(resp)["LATEST_FIREFOX_VERSION"]
                    if fstpc == 0:
                        pcver = resp
                        fstpc = 1
                    resp32 = "firefox-" + resp + "-win32.exe"
                    resp64 = "firefox-" + resp + "-win64.exe"
                    sendmsg = ""
                    if pcver != resp and files.find(resp32) > -1 and files.find(resp64) > -1:
                        sendmsg = sendmsg + "国际版火狐" + resp +"已发布\n"
                        pcver = resp
                    url = "https://api.github.com/repos/mozilla-mobile/fenix/releases/latest"
                    async with session.get(url=url) as req:
                        resp = await req.read()
                    resp = json.loads(resp)["tag_name"].replace("v", "")
                    if resp.find("rc") == -1:
                        if fstmo == 0:
                            mover = resp
                            fstmo = 1
                        resp32m = "fenix-" + resp + "-armeabi-v7a.apk"
                        resp64m = "fenix-" + resp + "-arm64-v8a.apk"
                        if mover != resp and files.find(resp32m) > -1 and files.find(resp64m) > -1:
                            sendmsg = sendmsg + "安卓版火狐" + resp +"已发布\n"
                            mover = resp
                    if sendmsg != "":
                        sendmsg = "\n" + sendmsg + "下载地址：${{ secrets.ok_dlurl }}"
                        sendmsg = {"action": "send_group_msg", "params": {"group_id": ${{ secrets.ok_group }}, "message": [{"type": "at", "data": {"qq": "all"}}, {"type": "text", "data": {"text": sendmsg}}]}}
                    return sendmsg
        async def main():
            os.system('./go-cqhttp &')
            retry = True
            while retry == True:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.ws_connect("ws://127.0.0.1:8090") as ws:
                            while True:
                                mm = datetime.datetime.now().minute
                                hh = datetime.datetime.utcnow().hour + 8
                                if hh >= 24:
                                    hh = hh - 24
                                resp = ""
                                if 7 <= hh <= 24:
                                    resp = await chkver()
                                if resp != "":
                                    await ws.send_json(resp)
                                else:
                                    resp = "现在是" + str(hh) + "时" + str(mm) + "分"
                                    sendmsg = {"action": "send_group_msg", "params": {"group_id": ${{ secrets.ok_alive }}, "message": resp}}
                                    await ws.send_json(sendmsg)
                                delay = random.randint(5, 10)
                                delay = delay * 60
                                await asyncio.sleep(delay)
                except:
                    await asyncio.sleep(5)
                    retry = True
        asyncio.get_event_loop().run_until_complete(main())
        EOF
        
        cat > Procfile << EOF
        web: python mirai.py
        EOF
        
        cat > manifest.yml << EOF
        applications:
        - name: mirai
          memory: 256M
          no-route: true
          health-check-type: process
          buildpacks:
          - python_buildpack
        EOF
        
        chmod 0755 *
        
    - name: Deploy to Cloud Foundry
      run: |
        curl -sL "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx cf7
        
        ./cf7 login \
          -a "https://api.us-south.cf.cloud.ibm.com" \
          -u "${{ secrets.CF_USER_IBM }}" \
          -p "${{ secrets.CF_PASSWORD_IBM }}" \
          -o "${{ secrets.CF_ORG_IBM }}" \
          -s "dev"
           
        ./cf7 push
